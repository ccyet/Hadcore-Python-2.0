# -*- coding:utf-8 -*-
''' 1
    字符串
    string模块中是否有一种字符串方法或者函数可以帮我鉴定一个字符串,
    是否是另一个大字符串的一部分?
'''
def strmatch():
    s = 'da'
    s1 = 'dawwwqe'
    if s in s1:
        print('yes')
    else:
        print('fuck off')
''' 2
    字符串标识符
    修改例6-1的idcheck.py脚本,使之可以检测长度为一的标识符,并且可以识别Python关键字。
    对后一个要求,你可以使用keyword模块(特别是 keyword.kwlist)来帮你。
'''
''' 3
    排序
    (a) 输入一串数字,从大到小排列之。
    (b) 跟a一样,不过要用字典序从大到小排列之。
'''
def ch6_3a():
    nlist = input('pleas input any numbers:\n')
    x = ''
    for i in sorted(nlist):
        x = x+i
    print(x)
''' 4
    算术
    更新上一章里面你的得分测试练习方案,把测试得分放到一个列表中去。
    你的代码应该可以计算出一个平均分,见练习2-9和练习5-3。
'''
def new_ratng():
    import random
    rating = []
    x = 0
    while x < 10:
        i = random.randint(40,100)
        rating.append(i)
        x+=1
    print(sum(rating)/x)
''' 5
    字符串
    (a) 更新你在练习2-7里面的方案,使之可以每次向前向后都显示一个字符串的一个字符。
    (b) 通过扫描来判断两个字符串是否匹配(不能使用比较操作符或者cmp()内建函数)。
        附加题:在你的方案里加入大小写区分.
    (c) 判断一个字符串是否重现(后面跟前面的一致)。
        附加题:在处理除了严格的回文之外,加入对例如控制符号和空格的支持。
    (d) 接受一个字符,在其后面加一个反向的拷贝,构成一个回文字符串。
'''
def ch6_5a():
    char = input('please enter string')
    length = len(char) - 1
    for k in char:
        ind = char.index(k)
        if ind == 0:
            print('%s%s'%(k,char[ind+1]))
        elif ind == length:
            print('%s%s'%(char[ind-1],k))
        else:
            print('%s%s'%(char[ind-1],char[ind+1]))
def ch6_5b():
    # 逐字匹配
    a1 = input('please entry string1\n')
    a2 = input('please entry string2\n')
    l1 = len(a1)
    l2 = len(a2)
    if l1 != l2:
        print('matching failed')
    else:
        for i in range(0,l1):
            if a1[i] != a2[i]:

                print('matching failed')
                break
        else:
            print('matching succed')
''' 6
    字符串
    创建一个string.strip()的替代函数:接受一个字符串,去掉它前面和后面的空格。
    (如果使用string.*strip()函数那本练习就没有意义了)
'''
def string_strip():
    str = input('please entry string')

    while True:
        if str[-1] == ' ':
            str = str[:-1]
        else:
            break
    while True:
        if str[0] == ' ':
            str = str[1:]
        else:
            break
    return str
''' 8
    列表
    给出一个整数值,返回代表该值的英文,比如输入"89"返回"eight-nine"。
    附加题: 能够返回符合英文语法规则的形式,比如输入“89”返回“eighty-nine”。
    本练习中的值限定在0到1,000.
'''
def ch6_8():
    single = ['zero','one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen']
    double = ['twenty','thirty','fourty','fifty','sixty','seventy','eighty','ninety','hundred']
    num = input('pleas entry a number whithin 0 - 100\n')
    n = int(num)
    if n < 20:
        print(single[n])
    elif n > 100:
        print('unavailable number')
    else:
        tdigit = num[0]
        sdigit = num[1]
        st = double[int(tdigit)-2]
        if sdigit != '0':
            sd = single[int(sdigit)]
        else:
            sd = ''
        print(st+'-'+sd)
''' 9
    转换
    为练习5-13写一个姊妹函数,接受分钟数,返回小时数和分钟数.总时间不变,并且要求小时数尽可能大。
'''
def ch6_9():
    # unlimited hours
    min = input('please entry a timing in minutes\n')
    nmin  = int(min)
    x = nmin/60
    tdg = int
    if x>1:
        sx = str(x)
        for ind,key in enumerate(sx):
            if key == '.':
                tdg = ind
        hour = sx[:tdg]
        m = nmin - int(hour)*60
        if m >= 10:

            print(hour+':%s'%m)
        else:
            print(hour+':0%s'%m)
    else:
        print('0:'+ min)

''' 10
    字符串
    写一个函数,返回一个跟输入字符串相似的字符串,要求字符串的大小写反转。
    比如,输入"Mr.Ed",应该返回"mR.eD"作为输出。
'''
def ch6_10():
    inp = input('please entry string\n')
    oup = ''
    for char in inp:
        if char.isupper():
            char = char.lower()

        else:
            char = char.upper()

        oup += char
    print(oup)
''' 11
    转换
    (a) 创建一个从整数到IP地址的转换程序,如下格式: WWW.XXX.YYY.ZZZ。
    (b) 更新你的程序,使之可以逆转换。
'''
def ch6_11a():
    # a
    add = input('please entry 7 to 12 numbers to built your email address\n')
    length = len(add)
    a1 = ''
    a2 = ''
    fad1 = ''
    fad2 = ''
    if length < 7 or length > 12:
        ad = 'unavailable address'
    else:
        for i in range(0,3):
            fad1 += add[i]
        for i in range(3,6):
            fad2 += add[i]
        if length >9:
            for i in range(6,9):
                a1 += add[i]
            for i in range(9,length):
                a2 += add[i]
            seq = {fad1,fad2,a1,a2}
            ad = '.'.join(seq)

        else:
            for i in range(6,length):
                a1 += add[i]
            ad = '%s.%s.%s'%(fad1,fad2,a1)
    return ad

def ch6_11b():
    ad = ch6_11a()
    length = len(ad)
    re_ad = ''
    for i in range(1,length):
        re_ad += ad[-i]
    print(re_ad+ad[0],ad)
''' 12
    字符串
    (a) 创建一个名字为findchr()的函数,函数声明如下:
        def findchr(string, char)
        findchr()要在字符串string中查找字符char,找到就返回该值的索引,否则返回-1。
        不能用string.*find()或者string.*index()函数和方法
    (b) 创建另一个叫rfindchr()的函数,查找字符char最后一次出现的位置。
        它跟findchr()工作类似,不过它是从字符串的最后开始向前查找的。
    (c) 创建第三个函数,名字叫 subchr(),声明如下:
        def subchr(string, origchar, newchar)
        subchr()跟 findchr()类似,不同的是,如果找到匹配的字符就用新的字符替换原先字符,返回修改后的字符串。
'''
def findchr(str,char):
    for ind,key in enumerate(str):
        if key == char:
            return ind
    else:
        return -1
def rfindchr(str,char):
    length = len(str)-1
    while True:
        if char == str[length]:
            break
        else:
            length -= 1
    return length
def subchr(str,origchar,newchar):
    ind = findchr(str,origchar)
    if ind == -1:
        print('matching failed')
    else:
        bchar = str[:ind]
        achar = str[ind+1:]
        return bchar+newchar+achar

''' 14
    随机数
    设计一个"石头,剪子,布"游戏,有时又叫"Rochambeau",你小时候可能玩过,下面是规则。
    你和你的对手,在同一时间做出特定的手势,必须是下面一种手势:石头,剪子,布.胜利者从下面的规则中产生,
    这个规则本身是个悖论。
    (a)布包石头.
    (b)石头砸剪子,
    (c)剪子剪破布.
    在你的计算机版本中,用户输入她/他的选项,计算机找一个随机选项,然后由你的程序来决定一个胜利者或者平手。
    注意:最好的算法是尽量少的使用if语句。
'''
def rochambeau():
    # Python 3 中字典无需用 enumerate 重新生成迭代器，直接items（）即可
    import random
    user = input('pleas make your choice in a single number\n%s %s %s'%('1.Ro','2.Cham','3.Beau\n'))
    cmt = random.choice(['1','2','3'])
    status = {'You win! Congratulations!':{'12','23','31'},'You lose motherfucker':{'21','32','13'},'Equal':{'11','22','33'}}
    condition = user+cmt
    for key,st in status.items():
        if condition not in st:

            continue
        else:
            print(key)
            break
''' 15
    转换
    (a) 给出两个可识别格式的日期,比如 MM/DD/YY 或者 DD/MM/YY 格式,计算出两个日期间的天数。
    (b) 给出一个人的生日,计算从此人出生到现在的天数,包括所有的闰月。
    (c) 还是上面的例子,计算出到此人下次过生日还有多少天。
'''
def date():

    return
''' 16
    矩阵
    处理矩阵M和N的加和乘操作。
'''
def matrix():
    #加法粗糙版
    m = [[1,2],[3,4]]
    n = [[2,3],[4,5]]
    #  plus
    mix = []
    row = len(m[0])
    col = len(m)
    for i in range(row):
        t = []
        for j in range(col):
            t.append(m[i][j]+n[i][j])
        mix.append(t)
    return mix
def pythonic_add(m,n):
    # pythonic 版加法
    if isinstance(m,(tuple,list)) and isinstance(n,(tuple,list)):
        return [[x+y for x,y in zip(i,j)] for i,j in zip(m,n)]
''' 17
    方法
    实现一个叫myPop()的函数,功能类似于列表的pop()方法,
    用一个列表作为输入, 移除列表的最新一个元素,并返回它。
'''
def myPop(lst):
    data = lst[-1]
    lst.remove(data)
    return data
''' 19
    多列输出
    有任意项的序列或者其他容器,把它们等距离分列显示.
    由调用者提供数据和输出格式.
    例如,如果你传入100个项并定义3列输出,按照需要的模式显示这些数据.
    这种情况下,应该是两列显示34个项,最后一列显示32个.
    你可以让用户来选择水平排序或者垂直排序.
'''
def output(seq,flag,cnt):
    l = len(seq)
    if l >= cnt:
        length = l % cnt
        if flag == 'row':
            amnts = int(l / cnt) #每组含元素个数
            new = []
            if length:
                x = 1 #调节每组个数
            else:
                x = 0
            for i in range(0,cnt*(amnts+x),amnts+x):
                tmp = []
                mul = i + amnts+x
                tmp = seq[i:mul]
                new.append(tmp)

            [print(n) for n in new]
        elif flag == 'col':
            amnts = cnt #每组含元素个数
            new = []
            if length:
                x = 2 #调节最后一行
            else:
                x =1
            for i in range(1, int(l/cnt)+x):
                tmp = []
                mul = i * cnt
                omul = (i - 1) * cnt
                tmp = seq[omul:mul]
                new.append(tmp)

            [print(n) for n in new]
        else:
            print('unavailable variable')
    else:
        print('row or column cannot exceed the length of your sequence')
m = [i for i in range(66)]
output(m,'row',2)
